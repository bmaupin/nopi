import forge from 'node-forge';
// Use pure JavaScript for node-forge so it can run in the browser
forge.options.usePureJavaScript = true;

import {
  getSignatureSectionSize,
  getSignatureSize,
  randomBytes,
} from './utils';

// https://www.3dbrew.org/wiki/Ticket
// Starts at 0x2a40
export class CiaTicket {
  private arrayBuffer: ArrayBuffer;
  private startingByte: number;

  private static readonly TICKET_DATA_SIZE = 0x210;

  private signatureType: Uint8Array;

  constructor(arrayBuffer: ArrayBuffer, startingByte: number) {
    this.arrayBuffer = arrayBuffer;
    this.startingByte = startingByte;

    this.signatureType = new Uint8Array(arrayBuffer, startingByte, 4);
  }

  // 0x2a44
  get signature() {
    return new Uint8Array(
      this.arrayBuffer,
      this.startingByte + 4,
      getSignatureSize(this.signatureType)
    );
  }

  // 0x2bff
  get titleKey() {
    return new Uint8Array(
      this.arrayBuffer,
      this.startingByte + getSignatureSectionSize(this.signatureType) + 0x7f,
      0x10
    );
  }

  // It seems that the title key can be random
  // https://github.com/3DSGuy/Project_CTR/blob/319c4c6a24747a6def3c012312ed13a2f76bb369/makerom/cia.c#L188
  generateNewTitleKey() {
    this.titleKey.set(new Uint8Array(randomBytes(0x10)));
  }

  // 0x2c10
  get ticketId() {
    return new Uint8Array(
      this.arrayBuffer,
      this.startingByte + getSignatureSectionSize(this.signatureType) + 0x90,
      0x8
    );
  }

  // Ticket ID always seems to be random
  // https://github.com/3DSGuy/Project_CTR/blob/319c4c6a24747a6def3c012312ed13a2f76bb369/makerom/cia.c#L179
  generateNewTicketId() {
    this.ticketId.set(new Uint8Array([0x00, 0x04, ...randomBytes(6)]));
  }

  // 0x2c1c
  get titleId() {
    return new Uint8Array(
      this.arrayBuffer,
      this.startingByte + getSignatureSectionSize(this.signatureType) + 0x9c,
      0x8
    );
  }

  set titleId(newTitleId: Uint8Array) {
    this.titleId.set(newTitleId);
  }

  get size() {
    return (
      getSignatureSectionSize(this.signatureType) + CiaTicket.TICKET_DATA_SIZE
    );
  }

  generateSignature() {
    // The modulus is also in the NCCH extended header at offset 0x700 (0x4000 in the CIA
    // file), but we'll define it here just to make sure it's the one that matches the
    // public/private exponents
    const modulus = new Uint8Array([
      0x00, 0xca, 0xc5, 0x88, 0xc7, 0xf1, 0x2a, 0x09, 0x2b, 0x76, 0x49, 0xc0,
      0xa8, 0x35, 0x75, 0x10, 0x82, 0xc2, 0xb5, 0xe5, 0xb2, 0xe9, 0xc8, 0x18,
      0x88, 0xf3, 0x98, 0x89, 0xbf, 0x9d, 0xe6, 0xe4, 0x0b, 0x71, 0x5d, 0xdd,
      0x3f, 0x13, 0x82, 0x71, 0xf2, 0xed, 0x31, 0x86, 0x99, 0xd9, 0x47, 0xfe,
      0xc5, 0x7a, 0x75, 0x93, 0xe1, 0xf8, 0x6d, 0xc6, 0x3d, 0x9b, 0xe1, 0x15,
      0x99, 0xe1, 0xc2, 0xe0, 0x5c, 0x38, 0x4b, 0x35, 0xa2, 0x4d, 0x3e, 0xe2,
      0xce, 0xfb, 0xb3, 0x08, 0xa3, 0xdd, 0x0c, 0x26, 0x31, 0x84, 0x92, 0x27,
      0xc8, 0x8a, 0x8e, 0xc8, 0x83, 0xa8, 0x6c, 0xa7, 0xa3, 0x39, 0x71, 0x9e,
      0xf1, 0x34, 0x91, 0x01, 0xdf, 0x11, 0x4a, 0x9c, 0xf9, 0x8b, 0xf9, 0x2f,
      0x46, 0x44, 0x0a, 0x72, 0x38, 0xf3, 0x8b, 0x6d, 0x23, 0x33, 0x89, 0xbf,
      0x66, 0x34, 0xa7, 0x86, 0xe6, 0xad, 0xf2, 0xde, 0xf9, 0xab, 0x16, 0xa1,
      0x40, 0xee, 0xd8, 0xf7, 0x6c, 0xdc, 0x00, 0x92, 0xcb, 0x31, 0x49, 0xfc,
      0x26, 0x64, 0x24, 0x08, 0x8f, 0xc6, 0x60, 0xff, 0x1e, 0xe3, 0xf0, 0xdd,
      0xfb, 0x6d, 0x0d, 0x0f, 0x49, 0x7c, 0xad, 0x03, 0xec, 0x9f, 0x63, 0x58,
      0xfa, 0x46, 0xdf, 0xa2, 0x64, 0x0e, 0xcc, 0x85, 0x57, 0xe7, 0x2c, 0x61,
      0x7f, 0x59, 0xb8, 0x62, 0x7d, 0x59, 0x0e, 0xf6, 0x84, 0x96, 0x99, 0x42,
      0xb0, 0x39, 0x83, 0x80, 0xb5, 0x52, 0x2e, 0x07, 0x3f, 0x92, 0xe3, 0x9e,
      0xf5, 0x47, 0xeb, 0xa7, 0xd7, 0xd4, 0x15, 0xf1, 0x22, 0x82, 0x32, 0xbe,
      0x2a, 0xd0, 0x8c, 0x01, 0xcc, 0x30, 0xa9, 0x11, 0x96, 0xf6, 0xe9, 0x2b,
      0xea, 0x0e, 0xf8, 0x2d, 0x0d, 0xb1, 0x91, 0xd5, 0x1a, 0x94, 0x51, 0xb9,
      0x85, 0x39, 0xb0, 0xaf, 0x9f, 0x54, 0x9e, 0x99, 0xe1, 0x46, 0xe5, 0x6f,
      0xe2, 0x5f, 0x4b, 0x4e, 0x23,
    ]);
    const publicExponent = new Uint8Array([0x01, 0x00, 0x01]);
    const privateExponent = new Uint8Array([
      0x3e, 0x2b, 0xbe, 0xba, 0x7f, 0x29, 0x02, 0x52, 0xbf, 0x1b, 0xf1, 0xe4,
      0x21, 0x2f, 0xd9, 0x76, 0x1e, 0x39, 0x23, 0x4a, 0x6d, 0xff, 0x99, 0xf6,
      0x33, 0xaa, 0x2b, 0x62, 0x03, 0x0a, 0x0e, 0x15, 0xac, 0x16, 0xb9, 0x85,
      0x63, 0x77, 0xf5, 0x74, 0x24, 0x61, 0xb1, 0x01, 0x6e, 0xeb, 0x72, 0x24,
      0x1e, 0x5d, 0xfa, 0x8f, 0xa8, 0x5a, 0x10, 0x14, 0x47, 0xbd, 0x05, 0xa0,
      0x7e, 0xe5, 0xff, 0x60, 0x87, 0x2a, 0x18, 0x31, 0xc1, 0x39, 0x6c, 0xd5,
      0x45, 0xbb, 0x29, 0x05, 0x04, 0xfb, 0x7a, 0xa2, 0x68, 0x21, 0x5f, 0xed,
      0x4e, 0xfe, 0x64, 0x60, 0x69, 0xbd, 0x96, 0xd0, 0xa7, 0x06, 0x3d, 0x53,
      0x7b, 0x68, 0x92, 0x88, 0x50, 0x86, 0xee, 0x06, 0x5d, 0x72, 0x73, 0x9a,
      0x39, 0xb6, 0x72, 0x3b, 0x20, 0x01, 0x39, 0xdf, 0x37, 0x28, 0x1e, 0xf5,
      0x39, 0x63, 0xbc, 0x2a, 0xf2, 0x5e, 0xab, 0x1a, 0x99, 0xe4, 0x5b, 0xeb,
      0xe6, 0x36, 0x30, 0x6c, 0x40, 0x01, 0x61, 0x60, 0xcc, 0x55, 0x89, 0x6d,
      0xca, 0x7e, 0xe0, 0x64, 0x78, 0x7f, 0x7b, 0x26, 0xae, 0x3e, 0xa3, 0x12,
      0x45, 0x16, 0xf6, 0xc8, 0xd0, 0xb9, 0x4f, 0x91, 0x11, 0x12, 0x11, 0xbb,
      0xbb, 0x7f, 0xab, 0xc7, 0x82, 0xdc, 0x4a, 0x61, 0x9c, 0x14, 0xae, 0x29,
      0xfd, 0x3a, 0x60, 0x13, 0x93, 0x19, 0x2f, 0x54, 0x49, 0xb2, 0x44, 0x34,
      0x58, 0x14, 0xd7, 0x2f, 0x70, 0x25, 0xa0, 0x48, 0x66, 0x76, 0x55, 0x87,
      0x9b, 0x25, 0x77, 0x6d, 0x0b, 0x75, 0x98, 0x8b, 0xa6, 0x39, 0x40, 0x3c,
      0x21, 0x7f, 0x2a, 0x24, 0xc1, 0xa5, 0xc1, 0xdc, 0x5a, 0x57, 0x54, 0xf6,
      0x03, 0xf6, 0xad, 0x51, 0x33, 0x40, 0x6d, 0x5c, 0x26, 0x5e, 0x29, 0x92,
      0x82, 0xe5, 0x29, 0x13, 0x7d, 0x7d, 0xfe, 0x08, 0x73, 0xbc, 0x5d, 0xc4,
      0xe9, 0x2b, 0xd6, 0x71,
    ]);

    const ticketData = new Uint8Array(
      this.arrayBuffer,
      this.startingByte + getSignatureSectionSize(this.signatureType),
      CiaTicket.TICKET_DATA_SIZE
    );

    // https://stackoverflow.com/a/58301910/399105
    const messageDigest = forge.md.sha256.create();
    const buffer = String.fromCharCode.apply(null, ticketData);
    messageDigest.update(buffer);

    const privateKey = forge.pki.rsa.setPrivateKey(
      new forge.jsbn.BigInteger(Array.from(modulus)),
      new forge.jsbn.BigInteger(Array.from(publicExponent)),
      new forge.jsbn.BigInteger(Array.from(privateExponent))
    ) as forge.pki.rsa.PrivateKey;

    const signature = privateKey.sign(messageDigest);

    this.signature.set(Buffer.from(signature, 'ascii'));
  }
}
